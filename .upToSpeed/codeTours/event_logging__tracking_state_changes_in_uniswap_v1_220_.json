{"title":"Event Logging: Tracking State Changes in Uniswap V1","id":"WuFh7NErthxmTaAC84V/qjzxA6YI6LB7wYBSnCXZdUY=","steps":[{"type":"textOnly","description":"Welcome to this tour on event logging and state changes in Uniswap V1. As smart contract auditors preparing to audit Uniswap V4, understanding the foundational concepts of Uniswap is crucial. In this tour, we'll explore how Uniswap V1 uses events to record important state changes, which is essential for transparency and off-chain monitoring.","title":"","id":"1902"},{"type":"highlight","description":"Let's start by examining the main events defined in the Uniswap V1 exchange contract. These events are crucial for tracking important state changes in the protocol.","file":"contracts/uniswap_exchange.vy","highlight":[{"start":13,"end":18}],"title":"","id":"1943"},{"type":"highlight","description":"Now, let's look at the state variables of the Uniswap V1 exchange contract. These variables store crucial information about the exchange's state.","file":"contracts/uniswap_exchange.vy","highlight":[{"start":20,"end":27}],"title":"","id":"1944"},{"type":"highlight","description":"The setup function acts as a constructor for the Uniswap V1 exchange contract. It's called once by the factory during contract creation to initialize the exchange.","file":"contracts/uniswap_exchange.vy","highlight":[{"start":31,"end":38}],"title":"","id":"1945"},{"type":"highlight","description":"The addLiquidity function is responsible for adding liquidity to the exchange. Let's examine how it works and how it emits events to log state changes.","file":"contracts/uniswap_exchange.vy","highlight":[{"start":46,"end":74}],"title":"","id":"1946"},{"type":"highlight","description":"The removeLiquidity function allows users to withdraw their liquidity from the exchange. Let's see how it handles the process and logs the state changes.","file":"contracts/uniswap_exchange.vy","highlight":[{"start":82,"end":97}],"title":"","id":"1947"},{"type":"highlight","description":"Let's examine the main events defined in the Uniswap V1 exchange contract. In Ethereum, events are a way for smart contracts to log important occurrences on the blockchain.\n\n1. TokenPurchase: Logs when a user buys tokens with ETH, recording the buyer's address, ETH spent, and tokens received.\n2. EthPurchase: Logs when a user sells tokens for ETH, recording the buyer's address, tokens sold, and ETH received.\n3. AddLiquidity: Records when a provider adds liquidity, logging their address and the amounts of ETH and tokens added.\n4. RemoveLiquidity: Logs when a provider removes liquidity, recording their address and the amounts of ETH and tokens withdrawn.\n5. Transfer and Approval: Standard ERC20 events for token transfers and approvals.\n\nThese events are crucial for tracking state changes, enabling off-chain systems to monitor the exchange's activity, and providing transparency for users and auditors. They serve as an immutable record of all significant actions within the protocol.","file":"contracts/uniswap_exchange.vy","highlight":[{"start":13,"end":18}],"title":"","id":"1904"},{"type":"highlight","description":"Let's look at the addLiquidity function. This function is responsible for adding liquidity to the exchange and emits multiple events to record the state changes.","file":"contracts/uniswap_exchange.vy","highlight":[{"start":46,"end":74}],"title":"","id":"1905"},{"type":"highlight","description":"Now, let's examine the ethToTokenInput function. This function handles the conversion of ETH to tokens and emits a TokenPurchase event.","file":"contracts/uniswap_exchange.vy","highlight":[{"start":126,"end":134}],"title":"","id":"1906"},{"type":"revealFiles","files":["contracts/uniswap_factory.vy"],"description":"Now that we've examined event logging in the exchange contract, let's shift our focus to the factory contract. The factory contract is responsible for creating new exchange contracts and also uses events to log important actions. This relationship between factory and exchange contracts is crucial for understanding how Uniswap V1 manages its ecosystem and records state changes across the protocol.","title":"","id":"1907"},{"type":"highlight","description":"Here we can see the NewExchange event defined and emitted in the createExchange function. This event logs the creation of new exchanges.","file":"contracts/uniswap_factory.vy","highlight":[{"start":4,"end":31}],"title":"","id":"1908"},{"type":"revealFiles","files":["tests/exchange/test_liquidity_pool.py"],"description":"Now, let's look at a test file to see how these events and state changes are verified during the testing process.","title":"","id":"1909"},{"type":"highlight","description":"This test case verifies the correct behavior of adding liquidity, including the resulting state changes and, implicitly, the emission of events. While the test doesn't directly check for event emissions, the assertions on state changes indirectly confirm that the AddLiquidity and Transfer events were correctly emitted. For instance, the change in totalSupply and balances implies a Transfer event, while the updated token balances suggest an AddLiquidity event. As auditors, it's crucial to ensure that these state changes and corresponding events are correctly implemented and tested, as they're essential for transparency and off-chain monitoring of the protocol.","file":"tests/exchange/test_liquidity_pool.py","highlight":[{"start":46,"end":52}],"title":"","id":"1910"},{"type":"textOnly","description":"As we conclude this tour of Uniswap V1's event logging and state changes, let's recap the key points and their significance for your upcoming Uniswap V4 audit:\n\n1. Event Types: We've seen events for TokenPurchase, EthPurchase, AddLiquidity, RemoveLiquidity, and NewExchange. These events capture core protocol actions.\n\n2. State Transparency: Events provide an immutable record of state changes, crucial for off-chain monitoring and analysis.\n\n3. Data Indexing: The use of 'indexed' parameters facilitates efficient event filtering and querying.\n\nWhen auditing Uniswap V4, consider:\n- Are all critical state changes accompanied by appropriate event emissions?\n- Do events contain sufficient information for reconstructing the protocol's state?\n- Are there any potential information leaks through overly verbose events?\n- How might the event structure be optimized for gas efficiency without sacrificing transparency?\n\nRemember, proper event implementation is crucial for protocol transparency, user trust, and integration with external systems. Your audit should scrutinize both the presence and the quality of event logging in Uniswap V4.","title":"","id":"1911"}]}