{"title":"Uniswap V1: Documentation and Core Contracts Overview","id":"xlbbMFNG6EB2UG5onozkKdjt2o0rTRNYATrq7p5SiFk=","steps":[{"type":"textOnly","description":"Welcome to the Uniswap V1 Documentation and Resources tour. As smart contract auditors preparing to audit Uniswap V4, it's crucial to understand the origins and fundamentals of the Uniswap protocol. This tour will guide you through key documentation and resources, providing insights into the project's structure, licensing, and core concepts.","title":"","id":"2042"},{"type":"revealFiles","files":["README.md"],"description":"Let's examine the README.md file, which is crucial for auditors. It provides an overview of Uniswap V1, including installation instructions and key resources. Pay special attention to the testing framework mentioned. Understanding the project's testing setup is vital for auditors, as it helps identify potential vulnerabilities and ensures thorough code coverage.","title":"","id":"2043"},{"type":"highlight","description":"Note the installation process and the emphasis on using Python 3. Pay special attention to the step about switching to a specific Vyper compiler version, as this could be crucial for maintaining consistency in smart contract compilation.","file":"README.md","highlight":[{"start":1,"end":5}],"title":"","id":"2044"},{"type":"revealFiles","files":["LICENSE.md"],"description":"Next, let's examine the LICENSE.md file. Uniswap V1 is licensed under the GNU General Public License v3.0, which has important implications for how the code can be used, modified, and distributed.","title":"","id":"2045"},{"type":"highlight","description":"Pay close attention to these sections of the license. They outline the permissions granted, the conditions for modifying and distributing the code, and the absence of warranty. These are crucial considerations when auditing and potentially modifying the codebase.","file":"LICENSE.md","highlight":[{"start":339,"end":352}],"title":"","id":"2046"},{"type":"revealFiles","files":["contracts/uniswap_exchange.vy"],"description":"Now, let's explore the core smart contract of Uniswap V1: uniswap_exchange.vy. This contract implements the automated market maker functionality.","title":"","id":"2047"},{"type":"textOnly","description":"Let's begin our in-depth analysis of the Uniswap V1 exchange contract. This contract is the core of Uniswap's functionality, implementing the automated market maker mechanism. We'll examine its structure, starting with the contract interface and events.","title":"","id":"2052"},{"type":"highlight","description":"Here we see the contract interface and the events defined in the exchange contract. The interface defines functions from other contracts that this contract interacts with. The events are crucial for off-chain applications to track important contract actions.","file":"contracts/uniswap_exchange.vy","highlight":[{"start":1,"end":18}],"title":"","id":"2053"},{"type":"highlight","description":"Now, let's examine the state variables of the exchange contract. These variables store crucial information about the exchange, including token balances, allowances, and references to the traded token and the factory contract.","file":"contracts/uniswap_exchange.vy","highlight":[{"start":20,"end":27}],"title":"","id":"2054"},{"type":"highlight","description":"The setup function is called once by the factory during contract creation. It initializes the exchange with the address of the token it will trade and sets some basic parameters.","file":"contracts/uniswap_exchange.vy","highlight":[{"start":31,"end":38}],"title":"","id":"2055"},{"type":"highlight","description":"The addLiquidity function is crucial for the AMM mechanism. It allows users to deposit ETH and tokens to the exchange, minting liquidity tokens in return. Note how it handles the case of initial liquidity differently from subsequent additions.","file":"contracts/uniswap_exchange.vy","highlight":[{"start":46,"end":74}],"title":"","id":"2056"},{"type":"highlight","description":"These are the core pricing functions of Uniswap V1. The getInputPrice and getOutputPrice functions implement the constant product formula (x * y = k) that defines how Uniswap calculates exchange rates.","file":"contracts/uniswap_exchange.vy","highlight":[{"start":104,"end":124}],"title":"","id":"2057"},{"type":"revealFiles","files":["contracts/uniswap_factory.vy"],"description":"Let's examine the Uniswap factory contract: uniswap_factory.vy. This contract is responsible for creating and managing individual exchange contracts.","title":"","id":"2049"},{"type":"highlight","description":"These are the main functions of the factory contract. Pay special attention to createExchange, which is used to deploy new exchange contracts for different tokens.","file":"contracts/uniswap_factory.vy","highlight":[{"start":18,"end":46}],"title":"","id":"2050"},{"type":"textOnly","description":"This concludes our tour of Uniswap V1's documentation and resources. We've explored the README, license, and core contracts. As you prepare to audit Uniswap V4, use this understanding of V1 as a foundation. Remember to dive deeper into each component, paying close attention to the smart contract logic, especially in the exchange and factory contracts. Good luck with your audit!","title":"","id":"2051"}]}