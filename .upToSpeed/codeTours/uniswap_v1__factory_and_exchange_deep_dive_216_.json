{"title":"Uniswap V1: Factory and Exchange Deep Dive","id":"gyxBRo0de9qAOLa/s361M8E5cGrScRdzm75kXcyYNp4=","steps":[{"type":"textOnly","description":"Welcome to the Core Contracts Deep Dive of Uniswap V1. In this tour, we'll explore the Factory and Exchange contracts to understand how new exchanges are created, managed, and how token swaps and liquidity are handled. This foundational knowledge is crucial for smart contract auditors diving into the origins of Uniswap.","title":"","id":"1912"},{"type":"revealFiles","files":["contracts/uniswap_factory.vy"],"description":"The Factory contract is the core of Uniswap V1's architecture. It's responsible for creating and managing individual exchange contracts for different ERC20 tokens.","title":"","id":"1913"},{"type":"highlight","description":"The createExchange function is crucial. It creates a new exchange contract for a given token, ensuring only one exchange per token exists.","file":"contracts/uniswap_factory.vy","highlight":[{"start":18,"end":31}],"title":"","id":"1914"},{"type":"revealFiles","files":["contracts/uniswap_exchange.vy"],"description":"The Exchange contract is the core of Uniswap V1's functionality. It implements token swaps, liquidity management, and pricing mechanisms. Let's examine its main components:","title":"","id":"1948"},{"type":"highlight","description":"The addLiquidity function allows users to provide liquidity to the exchange. It handles both the initial liquidity provision and subsequent additions. Let's examine its implementation:","file":"contracts/uniswap_exchange.vy","highlight":[{"start":46,"end":74}],"title":"","id":"1949"},{"type":"highlight","description":"The ethToTokenSwapInput function is a key part of the exchange process, allowing users to swap ETH for tokens. Here's how it's implemented:","file":"contracts/uniswap_exchange.vy","highlight":[{"start":149,"end":152}],"title":"","id":"1950"},{"type":"highlight","description":"The getInputPrice function implements the constant product formula (x * y = k) used by Uniswap to determine exchange rates. Let's examine its implementation:","file":"contracts/uniswap_exchange.vy","highlight":[{"start":104,"end":111}],"title":"","id":"1951"},{"type":"textOnly","description":"We've explored the key components of Uniswap V1: the Factory contract for managing exchanges, and the Exchange contract for handling swaps and liquidity. The Exchange contract implements the automated market maker model using the constant product formula, enabling decentralized token exchanges without traditional order books. This design allows for permissionless trading and liquidity provision, forming the foundation for more advanced decentralized exchange protocols.","title":"","id":"1952"},{"type":"highlight","description":"The addLiquidity function allows users to provide liquidity to the exchange. It handles both the initial liquidity provision and subsequent additions.","file":"contracts/uniswap_exchange.vy","highlight":[{"start":46,"end":74}],"title":"","id":"1916"},{"type":"highlight","description":"The ethToTokenSwapInput function is a key part of the exchange process, allowing users to swap ETH for tokens.","file":"contracts/uniswap_exchange.vy","highlight":[{"start":149,"end":152}],"title":"","id":"1917"},{"type":"highlight","description":"The getInputPrice function implements Uniswap's constant product formula (x * y = k).\nThis formula ensures that the product of the reserves remains constant after trades,\nmaintaining a balanced liquidity pool.\n\nKey points for auditors:\n1. The formula: (x + Δx) * (y - Δy) = k, where k is constant\n2. A 0.3% fee is applied (997/1000) to incentivize liquidity providers\n3. The function calculates the output amount based on input and reserves\n4. It's crucial for price discovery and slippage in the absence of order books\n\nAuditors should verify the correctness of this implementation and consider its\nimplications on price manipulation and front-running risks.","file":"contracts/uniswap_exchange.vy","highlight":[{"start":104,"end":111}],"title":"","id":"1918"},{"type":"textOnly","description":"We've explored the key components of Uniswap V1: the Factory and Exchange contracts. As auditors, focus on:\n\n1. Reentrancy risks in liquidity functions\n2. Precision loss in price calculations\n3. Potential front-running vulnerabilities\n4. Proper access control in critical functions\n\nBest practices:\n- Thoroughly test edge cases in swap functions\n- Verify the constant product formula implementation\n- Analyze gas optimization without compromising security\n\nConsider exploring formal verification tools for AMM contracts to enhance your audit process.","title":"","id":"1919"}]}